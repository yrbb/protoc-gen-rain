package generator

import (
	"bytes"
	"encoding/json"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"log"
	"os"
	"sort"
	"strings"
)

func GenHandler(repo, path string) {
	bts, err := os.ReadFile(path + "/handler.json")
	if err != nil {
		log.Println("handler.json file not found")
		return
	}

	m := map[string]string{}
	if err := json.Unmarshal(bts, &m); err != nil {
		log.Println("handlers.json file content error")
		return
	}

	str := `// Code generated by protoc-gen-gogin. DO NOT EDIT.

package router

`

	if len(m) == 0 {
		str += `import "` + strings.TrimSuffix(repo, "/") + `/router"

var RegisterMiddleware = router.RegisterMiddleware

		`

		os.WriteFile(path+"/handler.go", []byte(str), os.ModePerm)
		return
	}

	sls := []string{}
	sla := map[string]string{}

	ext := map[string]int{}
	str += `import (
	"` + strings.TrimSuffix(repo, "/") + `/router"

`
	for k, v := range m {
		vers, alias := "", ""
		if arr := strings.Split(v, "/"); len(arr) > 1 {
			vers = arr[len(arr)-1]
			if len(vers) > 3 && vers[0] == 'v' && vers[2] == '_' {
				vers = strings.ToUpper(vers[:1]) + vers[1:]
				alias = arr[len(arr)-2] + vers
			}
		}

		sla[k] = vers
		sls = append(sls, k)

		if _, ok := ext[v]; ok {
			continue
		}

		ext[v] = 1

		if vers != "" {
			str += "\t" + alias + `"` + strings.TrimSuffix(repo, "/") + `/` + v + `"` + "\n"
			m[k] = alias
			continue
		}

		str += "\t" + `"` + strings.TrimSuffix(repo, "/") + `/` + v + `"` + "\n"
	}
	str += ")\n\n"

	str += `var RegisterMiddleware = router.RegisterMiddleware

`

	sort.Strings(sls)

	str += "var (\n"
	for _, k := range sls {
		v := m[k]

		arr := strings.Split(k, "/")
		svc := arr[len(arr)-1]

		alias := sla[k]

		str += "\tRegister" + svc + `Handler` + alias + ` = ` + v + `.Register` + svc + "Handler\n"
	}
	str += ")\n"

	os.WriteFile(path+"/handler.go", sortImports(str), os.ModePerm)
}

func sortImports(data string) []byte {
	fset := token.NewFileSet()
	original := []byte(data)
	fileAST, _ := parser.ParseFile(fset, "", original, parser.ParseComments)
	ast.SortImports(fset, fileAST)

	bts := &bytes.Buffer{}
	err := (&printer.Config{Mode: printer.TabIndent | printer.UseSpaces, Tabwidth: 8}).Fprint(bts, fset, fileAST)
	if err != nil {
		panic(err)
	}

	return bts.Bytes()
}
